# -*- coding: utf-8 -*-

import logging

from libs.controller import RootControllerHandler, authorized
from libs.form_xcode import form_encode
from tornado.web import authenticated #@UnresolvedImport
from models import User
from json import dumps, loads

class RootController(RootControllerHandler):
    
    # GET '/'
    # -------
    def _get_(self, **kwargs):
        # demonstrates how to use the session.
        # hint: it's just a dict object assosiated to the request using a session cookie
        session = self.current_session
        session['count'] = session.get('count', 0) + 1
        name = loads(self.get_secure_cookie('auth') or '""')
        if name:
            self.write("hello %s, you've been here for %s times" % (name['name'], session['count']))
        else:
            self.write("hello %s, you've been here for %s times" % (str(session.keys()), session['count']))
        
    # GET '/login'
    # ------------
    def _get_login(self, **kwargs):
        # checks if the user is already logged
        user = self.current_user
        # if so, redirects to kwargs['next'] (kwargs is the qs/form params) or '/'
        if user: 
            self.redirect(kwargs.get('next', '/'))
        # else, renders the login template.
        # check it out at templates/login.html
        else: 
            self.render('main.html', menu='public_menu.html', content='login.html')
    
    # POST '/login'
    # -------------
    def _post_login(self, **kwargs):
        # checks if the user is already logged
        user = self.current_user
        # if not, tries to fetch the user
        # from the database and validate the password.
        if not user:
            user = User.by_user_name(kwargs['username'])   
            if user and user.validate_password(kwargs['password']):
                # sets the auth cookie.
                # don't worry, not the real 'password'.
                # just a piece of the junky salt generated by the User model
                self.set_secure_cookie('auth', dumps({
                    'id': user.id,
                    'name': user.display_name,
                    'password': user.password[0:8]
                }))
            else:
                logging.info("Failed login attempt")
                user = None
        
        # if user logged in successfuly
        # redirects to kwargs['next'] or '/'
        if user and user.user_name == 'admin':
            self.redirect('/admin')
        if user: 
            self.redirect(kwargs.get('next', '/home'))
        # else, redirects to the /login page
        else:
            kwargs.pop('password')
            self.redirect('/login?%s' % form_encode(kwargs))
        
    # GET '/logout'
    # -------------
    def _get_logout(self, **kwargs):
        self.clear_cookie('auth')
        self.redirect(kwargs.get('next', '/'))
        
    # GET '/forbidden'
    # ----------------
    def _get_forbidden(self, **kwargs):
        self.write('you can not access this resource %s' % kwargs.get('next', ''))
        
    # GET '/users_only'
    # -----------------
    @authenticated
    def _get_home(self, **kwargs):
        # if there isn't a user assosiated to the request using the auth cookie,
        # it'll redirect to /login
        self.render('main.html', menu='user_menu.html', content='blank.html') 
        
    # GET '/admins_only'
    # ------------------
    @authenticated
    @authorized('admin')
    def _get_admin(self, **kwargs):
        # if there isn't a user assosiated to the request using the auth cookie,
        # it'll redirect to /login.
        # if the user does not have the 'admin' permission,
        # it'll redirect to /forbidden.
        self.render('main.html', menu='admin_menu.html', content='blank.html')
        
